buildscript {
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.10.RELEASE"
    }
}

plugins {
    id 'java'
    id "org.springframework.boot" version "2.5.6"
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.8"
    id "io.franzbecker.gradle-lombok" version "4.0.0"
}

group 'ru.malletmustdie.cibinternstesttask'
version '1.0.0'

repositories {
    mavenCentral()
}

ext {
    springCloudVersion = '2020.0.4'
    lombockVersion = '1.18.2'
    mapstructVersion = '1.5.2.Final'
    queryDslVersion = '5.0.0'
    h2Version = '2.1.214'
    dbRiderVersion = '1.34.0'
    commonsLangVersion = '3.10'
    springDocVersion = '1.6.7'
    hibernateTypesVersion = '2.20.0'
    jupiterVersion = '5.7.0'
    mockitoJupiterVersion = '3.6.0'
    junitPlatformCommonsVersion = '1.7.0'
    testContainersVersion = '1.16.2'
    javaxPersistenceApiVersion = '2.2'
    javaeeApiVersion = '8.0.1'
}

apply plugin: "io.spring.dependency-management"

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

sourceSets {
    main.java.srcDirs += "$buildDir/generated/sources/annotationProcessor/java/main"
}

configurations {
    querydsl.extendsFrom annotationProcessor, implementation, compilyOnly, runtimeOnly
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter"

    // Spring data
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    runtimeOnly "org.postgresql:postgresql"
    implementation "org.liquibase:liquibase-core"
    implementation "com.vladmihalcea:hibernate-types-52:${hibernateTypesVersion}"

    // QueryDSL
    implementation "com.querydsl:querydsl-core:${queryDslVersion}"
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation "com.querydsl:querydsl-sql-spring:${queryDslVersion}"

    // MVC
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-validation"

    // Security
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server"
    implementation "org.springframework.security:spring-security-oauth2-client"

    // Others
    implementation "org.apache.commons:commons-lang3:${commonsLangVersion}"
    compileOnly "org.projectlombok:lombok:${lombockVersion}"
    annotationProcessor  "org.projectlombok:lombok:${lombockVersion}"
    implementation "org.springdoc:springdoc-openapi-webmvc-core:${springDocVersion}"
    implementation "org.springdoc:springdoc-openapi-ui:${springDocVersion}"
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    implementation 'org.springframework:spring-webflux'
    implementation "javax.persistence:javax.persistence-api:${javaxPersistenceApiVersion}"
    compileOnly "javax:javaee-api:${javaeeApiVersion}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation "com.h2database:h2:${h2Version}"
    testImplementation "com.github.database-rider:rider-spring:${dbRiderVersion}"
    testImplementation "org.testcontainers:postgresql:${testContainersVersion}"
    testImplementation "org.testcontainers:junit-jupiter:${testContainersVersion}"
}

querydsl {
    jpa = true
    library = "com.querydsl:querydsl-apt:${queryDslVersion}"
    querydslSourcesDir = "$buildDir/generated/sources/annotationProcessor/java/main"
}
initQuerydslSourcesDir.dependsOn clean

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

bootJar {
    archiveName 'cib-interns-test-task.jar'
    mainClassName = 'ru.malletmustdie.cibinternstesttask.CibInternsTestTaskApplication'
}

test {
    useJUnitPlatform()
}